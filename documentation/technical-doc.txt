**Architectural solutions**

1) Паттерн `Abstract Factory` в архитектуре классов вражеских юнитов
В начале игры мы узнаем тип вражеских юнитов, т.е. геометрическую форму, но все три цвета: красный, зеленый, синий - будут использоваться все зависимости от изначального выбора типа. Поэтому удобно использовать паттерн `Abstract Factory`. Создадим абстрактный класс `Unit`, от которого будут наследоваться три класса: `WeakEnemyUnit`, `StrongEnemyUnit`, `MightyEnemyUnit` - красный, синий и зеленый вражеский юнит соответственно. 
Также создадим абстрактный класс - абстрактную фабрику `EnemyUnitsFactory`, у которой есть методы, позволяющие создать вражеского юнита конкретного цвета. От этого класса будут наследоваться два класса: `СircleEnemyUnitsFactory`, `SquareEnemyUnitsFactory` - две фабрики, по одной на каждую геометрическую форму вражеского юнита, позволяющие создавать вражеских юнитов разных цветов, но одной геометрической формы.

2) Класс `Hero`
Класс `Hero` унаследован от класса 'Unit', т.к. должен содержать несколько полей схожих с полями вражеских юнитов, например, позиция, запас здоровья, время перезарядки. Но храниться будет отдельно от вражеских юнитов, т.к. их игровая логика отличается. Главным героем управляем мы, а вражескими юнитами ИИ. Кроме того у героя могут быть дополнительные пока, например, свой массив пуль, время перезарядки супер атаки, т.е. мы будем иметь больше свободы в добавлении фич в дальнейшем.

3) Классы `Window`, `Game`
Класс `Window` будет содержать методы позволяющие работать с графической библиотекой. Все обращения к методам библиотеки сокрыты именно здесь.
Класс 'Game' внутри себя будет хранить все объекты, содержащиеся в игре, например, фабрику для создания вражеских юнитов, массив вражеских юнитов, массив их пуль, главного героя (объект класса `Hero`).

4) Паттерн `Factory method` в архитектуре взаимодействия между юнитом и его пулями
Класс `Bullet` характеризуется следующими полями: позиция пули, урон, направление и скорость (вектор), расстояние до исчезновения. Значение стартовой позиции пули и ее направления зависит от конкретного состояния юнита и его игровой логики. Урон пули зависит от типа (геометрической формы) и силы (цвета) юнита. Скорость и длина полета пули зависит только от силы юнита. Таким образом, мы можем создать три фабрики пуль для разных сил юнитов (красный, зеленый, синий), что позволит нам не хранить значения скорости пули и длины ее полета в классе `Unit`, а вынести в отдельный файл с настройками. Но т.к. только этой информации для создания пули недостаточно, то метод `createBullet` внутри фабрики должен иметь доступ к информации о текущем состоянии конкретного юнита.

**Implementation solutions**

1) В файле `main.cpp` в функции `main` находится главный цикл игры, таймер, а также вызов методов для обновления игровой логики и графического интерфейса.  